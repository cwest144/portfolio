ESTIMATE of time to complete assignment: 25 hours

		Start	Time
Date	time 	spent 	Work completed
----	-----	----	--------------
9/02	9:30	0:45	Read assignment and documentation for find, refamiliarized myself with the Zoo
9/02	22:30	0:30	Read spec again and went to OH
9/03	22:30	01:00	Read find documentation and wrote psuedocode outline
9/04	20:00	01:00	Read spec and started writing fiend.c
9/05	17:00	01:00	continued working on fiend.c
9/05	22:00	00:30	continued working on fiend.c
9/07	23:00	01:30	went to OH and continued working on fiend.c
9/08	19:00	01:00	continued working on fiend.c
9/09	22:00	02:00	continued working on fiend.c
9/10	23:00	01:45	went to OH, continued working on fiend.c, wrote makefile, working on getting fiend.c to make
9/11	14:00	01:00	fiend makes! still lots of bugs to fix
9/11	22:00	02:00	debugging fiend (lots more to do)
9/12	11:30	01:30	debugging fiend (currently scoring 7 points on public test)
9/13	14:30	03:30	debugging fiend (currently scoring 12 points on public test)
9/13	21:00	00:30	went to OH		
9/14	00:00	01:00	debugging fiend (currently scoring 14 points on public test)
9/14	08:30	01:00	debugging fiend (currently scoring 15 points on public test)
9/14	19:30	01:00	went to OH, debugging fiend (currently scoring 17 points on public tests)
9/15	8:45	01:00	debugging fiend (currently scoring 17 points on public test, test 10 is giving me issues)
9/15	23:15	00:30	went to OH, passing all public tests
9/16	09:30	00:30	edge-casing
9/16	15:00	00:30	edge-casing
9/16	20:00	00:30	edge-casing and code clean up
9/17	09:00	01:15	bug-fixing and code-commenting
9/17	16:30	00:45	code-commenting and wrote difficulties
9/17	19:00	00:30	finished commenting code
	    		-----
				28:00  TOTAL time spent

Difficulties:
This was a lot to relearn about C after not coding since last fall (223). I was definitely nervous about the aspects that required malloc and pointers to pointers to structs. While many things came back naturally, I probably struggled most with the directory and file searching. The many similarities between the info from stat versus the info from a dir entry tripped me up: at one point I was trying to only pass the directory entry back to recursion if it itself was a directory. Conceptually, I struggled with what symbolic links are. I spent a bit of time thinking about how to replace the name of the symbolic link with the name of the thing it pointed to before realizing this was not needed. I also accidently came upon the perfectly acceptable case where a link in one directory points to a different directory in a different file tree, that could also be accessed from fiend via a different route. The method of using a list of all inode values would incorrectly flag this as a loop. I developed a method of recording just the inode values of the files on the path to a link (by creating a linked list which was essentially a linked list tree). This was an interesting edge case to address.


Attributions:
Linked list code from "Notes on Data Structures and Programming Techniques (CPSC 223, Spring 2018)" by James Aspnes

Strtoul usage info from paxdiablo on Stack Overflow:
https://stackoverflow.com/questions/17292545/how-to-check-if-the-input-is-a-number-or-not-in-c
